/*
 * Piotr Płaneta, Paweł Soboń, Tomasz Ruchałowski
 *
 * Grupa LK4 01.06.2023
 * */

/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>
#include <stdio.h>

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
#define HTS221_STATUS_REG    	(uint8_t)0x27
#define HTS221_HR_OUT_L_REG     (uint8_t)0x28
#define HTS221_HR_OUT_H_REG     (uint8_t)0x29
#define HTS221_TEMP_OUT_L_REG   (uint8_t)0x2A
#define HTS221_TEMP_OUT_H_REG   (uint8_t)0x2B
#define HTS221_H0_RH_X2        	(uint8_t)0x30
#define HTS221_H1_RH_X2        	(uint8_t)0x31
#define HTS221_T0_DEGC_X8      	(uint8_t)0x32
#define HTS221_T1_DEGC_X8      	(uint8_t)0x33
#define HTS221_T0_T1_DEGC_H2   	(uint8_t)0x35
#define HTS221_H0_T0_OUT_L     	(uint8_t)0x36
#define HTS221_H0_T0_OUT_H     	(uint8_t)0x37
#define HTS221_H1_T0_OUT_L     	(uint8_t)0x3A
#define HTS221_H1_T0_OUT_H     	(uint8_t)0x3B
#define HTS221_T0_OUT_L        	(uint8_t)0x3C
#define HTS221_T0_OUT_H        	(uint8_t)0x3D
#define HTS221_T1_OUT_L        	(uint8_t)0x3E
#define HTS221_T1_OUT_H        	(uint8_t)0x3F

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
uint8_t H0_rH_x2, H1_rH_x2;
int16_t H0_T0_OUT, H1_T0_OUT;
uint16_t H0_rH, H1_rH;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/**
* Funkcja ta pobiera dane z rejestrów czujnika HTS221, które przechowują jego kalibrację.
* Dane zapisywane są w zmiennych globalnych "H0_T0_OUT", "H1_T0_OUT", "H0_rH", "H1_rH"
*/
void HTS221_getCalibration(void)
{
	//bufor potrzebny do funkcji HAL_I2C_Mem_Read()
	uint8_t buffer[4];
	
	//odczytywanie wartości odpowiednich rejestrów
	//adresy rejestrów w pamięci urządzenia są zapisane jako stałe zdefiniowanej powyżej funkcji
	HAL_I2C_Mem_Read(&hi2c1, 0xBE, HTS221_H0_T0_OUT_L, 1, &buffer[0], 1, 100);
	HAL_I2C_Mem_Read(&hi2c1, 0xBE, HTS221_H0_T0_OUT_H, 1, &buffer[1], 1, 100);
	HAL_I2C_Mem_Read(&hi2c1, 0xBE, HTS221_H1_T0_OUT_L, 1, &buffer[2], 1, 100);
	HAL_I2C_Mem_Read(&hi2c1, 0xBE, HTS221_H1_T0_OUT_H, 1, &buffer[3], 1, 100);
	//sprintf(buf, "H0:0x%2X:0x%2X,  H1:0x%2X:0x%2X   \r\n", buffer[1], buffer[0], buffer[3], buffer[2]);
    //HAL_UART_Transmit(&huart2, (uint8_t *)buf, strlen(buf), 100);

	//przekształcenie dwóch 8-bitowych wartości do jednej 16-bitowej zmiennej
	H0_T0_OUT = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
	H1_T0_OUT = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
	//sprintf(buf, "H0_T0_OUT:0x%04X,  H1_T0_OUT:0x%04X  \r\n", H0_T0_OUT, H1_T0_OUT);
	//HAL_UART_Transmit(&huart2, (uint8_t *)buf, strlen(buf), 100);

	HAL_I2C_Mem_Read(&hi2c1, 0xBE, HTS221_H0_RH_X2, 1, &H0_rH_x2, 1, 100);
	HAL_I2C_Mem_Read(&hi2c1, 0xBE, HTS221_H1_RH_X2, 1, &H1_rH_x2, 1, 100);
	H0_rH = H0_rH_x2 >> 1;
	H1_rH = H1_rH_x2 >> 1;
	//sprintf(buf, "H0_rH_x2:0x%02X,H1:0x%02X \r\n", H0_rH_x2, H1_rH_x2);
    //HAL_UART_Transmit(&huart2, (uint8_t *)buf, strlen(buf), 100);
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */

  //pobierz zawartość rejestru WHO_AM_I z HTS221
  uint8_t data, whoAmIaddress = 0x0F;
  HAL_I2C_Master_Transmit(&hi2c1, 0xBE, &whoAmIaddress, 1, 100);
  HAL_I2C_Master_Receive(&hi2c1, 0xBE, &data, 1, 100);

  //sprintf(buf, "WHO_AM_I(0Fh) value:0x%X\r\n", data);
  //HAL_UART_Transmit(&huart2, (uint8_t *)buf, strlen(buf), 100);
  
  //wybudzanie HTS221 - ósmy bit rejestru CTRL_REG1 (pod adresem 0x20)
  uint8_t value1 = (0x01 << 7);
  HAL_I2C_Mem_Write(&hi2c1, 0xBE, 0x20, 1, &value1, 1, 100);

  //pobierz dane z rejestrów zawierających kalibrację czujnika (przydatne przy konwersji wartości wilgotności)
  HTS221_getCalibration();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    {
	  //uruchomienie "one-shot" - najmłodszy bit rejestru CTRL_REG2 (pod adresem 0x21). "one-shot" oznacza
	  //pojedyncze pobranie wartości wilgotności i temperatury.
  	  uint8_t value2 = (0x01 << 0);
  	  HAL_I2C_Mem_Write(&hi2c1, 0xBE, 0x21, 1, &value2, 1, 100);
	  
	  //pobranie statusu czujnika z rejestru STATUS_REG (pod adresem 0x27)
	  //gdy dwa najmłodsze bity rejestru są ustawione, wtedy można pobrać
	  //dane o wilgotności i temperaturze. Pobieranie statusu jest powtarzane
	  //dopóki nie umożliwia on pobrania wartości z czujnika, zatem pętla zakończy się
	  //gdy status będzie prawidłowy
  	  uint8_t status;
  	  do {
  		  HAL_Delay(100);
  		  HAL_I2C_Mem_Read(&hi2c1, 0xBE, 0x27, 1, &status, 1, 100);
  	  } while ((status & 0x03) != 0x03);
	  
  	  if (status){
			//bufor potrzebny do transmiji po UART
			char buf[40];
			//w tej tablicy będą przechowywane wartości dwóch 8-bitowych rejestrów
			//zawierających dane o wilgotności - te rejestry to HUMIDITY_OUT_L (adres 0x28)
			//oraz HUMIDITY_OUT_H (adres 0x29)
			uint8_t humidityValueFromRegs[2] = {0};

			//odczytanie wartości rejestru HUMIDITY_OUT_L - młodszy bajt wartości wilgotności
			HAL_I2C_Mem_Read(&hi2c1, 0xBE, 0x28, 1, &humidityValueFromRegs[0], 1, 100);
			//odczytanie wartości rejestru HUMIDITY_OUT_H - starszy bajt wartości wilgotności
			HAL_I2C_Mem_Read(&hi2c1, 0xBE, 0x29, 1, &humidityValueFromRegs[1], 1, 100);
			
			//wartości z rejestrów zapisywane są w jednej 16-bitowej zmiennej
			uint16_t rawHumidity = (humidityValueFromRegs[1] << 8) | humidityValueFromRegs[0];

			//sprintf(buf, "Humidity before conversion: 0x%X\r\n", rawHumidity);
			//HAL_UART_Transmit(&huart2, (uint8_t *)buf, strlen(buf), 100);
			
			//konwersja wartości wilgotności - widoczne użycie rejestrów kalibracyjnych, odczytanych wcześniej z czujnika
			float convertedHumidity = ((float)((int16_t)rawHumidity - (int16_t)H0_T0_OUT) * ((float)((int16_t)H1_rH - (int16_t)H0_rH)) /
					(float)((int16_t)H1_T0_OUT - (int16_t)H0_T0_OUT)  + (float)((int16_t)H0_rH));
			//zapisanie w buforze skonwertowanej wartości wilgotności
			sprintf(buf, "%.02f\r\n", convertedHumidity);
			//przesłanie po UART bufora zawierającego skonwertowaną wartość wilgotności
			HAL_UART_Transmit(&huart2, (uint8_t *)buf, strlen(buf), 100);
  	  }

  	  HAL_Delay(1000);



    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 10;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x10909CEC;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

